const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/supabaseClient-B7fnwhYs.js","assets/vendor-supabase-B7S7y5aO.js","assets/vendor-react-eWEExxYH.js"])))=>i.map(i=>d[i]);
import{_ as L}from"./vendor-supabase-B7S7y5aO.js";import{r as y}from"./vendor-router-BPn28yDh.js";import{u as de,L as G}from"./index-CiClp0FW.js";import{g as D,b as T}from"./Navbar-Dj_w0RSM.js";import{j as v}from"./vendor-ui-DqxmAIBo.js";function ue(d,b){const l=y.useMemo(()=>i=>i.bosses.reduce((g,S)=>g+Math.ceil((S.price||0)/(S.partySize||1)),0),[]),u=y.useMemo(()=>d.reduce((i,g)=>i+l(g),0),[d,l]),r=y.useMemo(()=>[...b].sort((i,g)=>{const S=Math.max(...i.difficulties.map(k=>k.price));return Math.max(...g.difficulties.map(k=>k.price))-S}),[b]),p=y.useMemo(()=>d.reduce((i,g)=>{var S;return i+(((S=g.bosses)==null?void 0:S.length)||0)},0),[d]),h=y.useMemo(()=>(i,g)=>i==="Limbo"?[1,2,3]:i==="Lotus"&&g==="Extreme"?[1,2]:[1,2,3,4,5,6],[]),m=y.useMemo(()=>i=>i.difficulties.map(g=>g.difficulty),[]);return{charTotal:l,overallTotal:u,sortedBossData:r,totalBossCount:p,getAvailablePartySizes:h,getBossDifficulties:m}}function fe(d){const b=[],l=new Set,u={};return console.log("🔍 Extracting characters from data structure..."),d.boss_runs&&Array.isArray(d.boss_runs)&&d.boss_runs.forEach(r=>{if(r.character&&typeof r.characterIdx=="number"){const p=`${r.character}-${r.characterIdx}`;if(l.has(p)||(l.add(p),b.push({name:r.character,index:r.characterIdx,bosses:[]}),console.log(`✅ Found character from boss_runs: ${r.character} (index: ${r.characterIdx})`)),u[p]||(u[p]=new Set),r.boss&&r.difficulty){const h=`${r.boss}-${r.difficulty}`;u[p].has(h)||(u[p].add(h),console.log(`📋 Found boss from boss_runs for ${r.character}: ${r.boss} (${r.difficulty})`))}}}),d.checked&&typeof d.checked=="object"&&Object.keys(d.checked).forEach(r=>{const p=r.split("-");if(p.length>=2){const h=p.slice(0,-1).join("-"),m=parseInt(p[p.length-1]);if(!isNaN(m)&&h){const i=`${h}-${m}`;l.has(i)||(l.add(i),b.push({name:h,index:m,bosses:[]}),console.log(`✅ Found character from checked (legacy): ${h} (index: ${m})`)),u[i]||(u[i]=new Set),Object.keys(d.checked[r]||{}).forEach(g=>{const S=g.split("-");if(S.length>=2){const C=S[S.length-1],k=S.slice(0,-1).join("-"),$=`${k}-${C}`;u[i].has($)||(u[i].add($),console.log(`📋 Found boss from checked for ${h}: ${k} (${C})`))}})}}}),d.weeklyBossClearHistory&&typeof d.weeklyBossClearHistory=="object"&&Object.values(d.weeklyBossClearHistory).forEach(r=>{r.bossClearStatus&&typeof r.bossClearStatus=="object"&&Object.keys(r.bossClearStatus).forEach(p=>{const h=p.split("-");if(h.length>=2){const m=h.slice(0,-1).join("-"),i=parseInt(h[h.length-1]);if(!isNaN(i)&&m){const g=`${m}-${i}`;l.has(g)||(l.add(g),b.push({name:m,index:i,bosses:[]}),console.log(`✅ Found character from weeklyBossClearHistory: ${m} (index: ${i})`)),u[g]||(u[g]=new Set),Object.keys(r.bossClearStatus[p]||{}).forEach(S=>{const C=S.split("-");if(C.length>=2){const k=C[C.length-1],$=C.slice(0,-1).join("-"),w=`${$}-${k}`;u[g].has(w)||(u[g].add(w),console.log(`📋 Found boss from history for ${m}: ${$} (${k})`))}})}}})}),b.forEach(r=>{const p=`${r.name}-${r.index}`,h=u[p];h&&h.size>0&&(r.bosses=Array.from(h).map(m=>{const i=m.split("-"),g=i[i.length-1];return{name:i.slice(0,-1).join("-"),difficulty:g,partySize:1,price:0}}),console.log(`🎯 Populated ${r.bosses.length} bosses for ${r.name}:`,r.bosses.map(m=>`${m.name}-${m.difficulty}`)))}),b.sort((r,p)=>r.index-p.index),console.log(`🎯 Extracted ${b.length} characters with bosses:`,b.map(r=>`${r.name}-${r.index} (${r.bosses.length} bosses)`)),b}function be(){const{userCode:d,isLoggedIn:b}=de(),[l,u]=y.useState([]),[r,p]=y.useState(""),[h,m]=y.useState(null),[i,g]=y.useState(""),[S,C]=y.useState(!1),[k,$]=y.useState({}),w=y.useRef(!1),R=o=>{console.log("🔄 STATE: setChecked called with:",JSON.stringify(o,null,2)),console.log("🔄 STATE: Previous checked state was:",JSON.stringify(k,null,2)),console.log("🔄 STATE: Preservation flag is:",w.current),$(o)},[N,M]=y.useState(""),[V,I]=y.useState(!1),[_,P]=y.useState(null),[F,z]=y.useState(""),[U,H]=y.useState(!1),J=y.useRef(null),j=y.useRef(null),{charTotal:q,overallTotal:Q,sortedBossData:W,totalBossCount:X,getAvailablePartySizes:A,getBossDifficulties:Y}=ue(l,T);y.useEffect(()=>{if(!d||!b){u([]),$({}),g("");return}(async()=>{var t;try{g(""),console.log("Loading data for user:",d);const{supabase:e}=await L(async()=>{const{supabase:s}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:s}},__vite__mapDeps([0,1,2])),{data:a,error:c}=await e.from("user_data").select("data").eq("id",d).single();if(c){if(c.code==="PGRST116"){console.log("No existing data found for user, starting fresh"),u([]),R({});return}throw c}if(a&&a.data){const s=a.data;if(console.log("📊 Raw user data:",s),console.log("📊 Characters found:",s.characters),console.log("📊 Boss runs found:",((t=s.boss_runs)==null?void 0:t.length)||0),s.characters&&Array.isArray(s.characters))u(s.characters),console.log("✅ Loaded characters (old format):",s.characters.length,s.characters);else{const n=fe(s);u(n),console.log("✅ Loaded characters (new format):",n.length,n)}const f={};s.boss_runs&&Array.isArray(s.boss_runs)&&(s.boss_runs.forEach(n=>{if(n.cleared){const E=`${n.character}-${n.characterIdx||0}`,x=`${n.boss}-${n.difficulty}`;f[E]||(f[E]={}),f[E][x]=!0}}),console.log("✅ Reconstructed checked state from boss_runs:",Object.keys(f).length,"characters")),Object.keys(f).length===0&&s.checked&&typeof s.checked=="object"?(console.log("📊 LOAD: Setting checked state from legacy data:",JSON.stringify(s.checked,null,2)),R(s.checked),console.log("✅ LOAD: Loaded legacy checked state:",Object.keys(s.checked).length,"entries")):(console.log("📊 LOAD: Setting checked state from boss_runs:",JSON.stringify(f,null,2)),R(f),console.log("✅ LOAD: Using reconstructed checked state from boss_runs"))}else console.log("No data found, starting fresh"),u([]),R({})}catch(e){console.error("Error loading user data:",e),g("Failed to load user data. Please try refreshing the page.")}})()},[d,b]);const Z=async()=>{if(!(!d||!b)){try{console.log("🔄 Refreshing checked state from boss runs...");const{supabase:o}=await L(async()=>{const{supabase:a}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:a}},__vite__mapDeps([0,1,2])),{data:t,error:e}=await o.from("user_data").select("data").eq("id",d).single();if(e)throw e;if(t&&t.data&&t.data.boss_runs&&Array.isArray(t.data.boss_runs)){const a={};return t.data.boss_runs.forEach(c=>{if(c.cleared){const s=`${c.character}-${c.characterIdx||0}`,f=`${c.boss}-${c.difficulty}`;a[s]||(a[s]={}),a[s][f]=!0}}),console.log("✅ Refreshed checked state from boss_runs:",Object.keys(a).length,"characters"),R(a),a}}catch(o){console.error("Error refreshing checked state from boss runs:",o)}return null}},K=o=>{const t=o.split("-");if(t.length>=2){const e=parseInt(t[t.length-1]);return[t.slice(0,-1).join("-"),e]}return[o,0]},ee=(o,t,e)=>o.find((a,c)=>a.name===t&&(a.index===e||c===e)),se=(o,t)=>{const e={...t};return console.log("🧹 Cleaning up checked state based on new boss selections..."),console.log("📊 Current checked state:",t),console.log("📋 New characters:",o.map(a=>{var c;return`${a.name} (${((c=a.bosses)==null?void 0:c.length)||0} bosses)`})),Object.keys(e).forEach(a=>{const[c,s]=K(a),f=ee(o,c,s);if(!f)console.log(`🗑️ Removing all entries for deleted character: ${a}`),delete e[a];else{const n=(f.bosses||[]).map(x=>`${x.name}-${x.difficulty}`),E=Object.keys(e[a]||{});console.log(`🔍 Character ${c}: Current bosses [${n.join(", ")}], Checked bosses [${E.join(", ")}]`),E.forEach(x=>{n.includes(x)?console.log(`✅ Preserving checked state for: ${c} - ${x}`):(console.log(`🗑️ Removing checked state for deselected boss: ${c} - ${x}`),delete e[a][x])}),Object.keys(e[a]||{}).length===0&&delete e[a]}}),console.log("🎯 Final cleaned checked state:",e),e},B=o=>{if(console.log("🔄 PRESERVE: Starting preservation process..."),console.log("🔄 PRESERVE: userCode:",d,"isLoggedIn:",b),!d||!b){console.log("❌ PRESERVE: Skipping - no userCode or not logged in");return}console.log("🔄 PRESERVE: Current checked state before preservation:",JSON.stringify(k,null,2)),console.log("🔄 PRESERVE: New characters data:",o.map(e=>{var a;return{name:e.name,index:e.index,bosses:((a=e.bosses)==null?void 0:a.map(c=>`${c.name}-${c.difficulty}`))||[]}})),w.current=!0,console.log("🔒 PRESERVE: Flag set to prevent overwrites");const t=se(o,k);console.log("🔄 PRESERVE: Cleaned checked state:",JSON.stringify(t,null,2)),R(t),console.log("✅ PRESERVE: debugSetChecked called with cleaned state"),setTimeout(()=>{w.current=!1,console.log("🔓 PRESERVE: Flag cleared - other hooks can now update")},500),console.log("✅ PRESERVE: Preservation process completed")},O=async o=>{if(!(!d||!b))try{const{supabase:t}=await L(async()=>{const{supabase:n}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:n}},__vite__mapDeps([0,1,2])),{data:e,error:a}=await t.from("user_data").select("data").eq("id",d).single();if(a&&a.code!=="PGRST116")throw a;const c=(e==null?void 0:e.data)||{},s={...c,...o,lastUpdated:new Date().toISOString()};console.log("💾 SAVE: Merging data - existing keys:",Object.keys(c),"new keys:",Object.keys(o));const{error:f}=await t.from("user_data").update({data:s}).eq("id",d);if(f)throw f;console.log("Data saved to cloud successfully")}catch(t){console.error("Error saving to cloud:",t)}},te=o=>{C(!0),m(o.target.value?parseInt(o.target.value):null),setTimeout(()=>C(!1),300)},oe=async()=>{if(!r.trim()||l.length>=G.CHARACTER_CAP)return;const o=l.length>0?Math.max(...l.map(c=>c.index||0))+1:0,t={name:r.trim(),index:o,bosses:[]},e=[...l,t];u(e),p(""),await O({characters:e})},ae=async o=>{if(o<0||o>=l.length)return;const t=l[o];P({character:t,index:o,timestamp:Date.now()}),I(!0),j.current&&clearTimeout(j.current),j.current=setTimeout(()=>{I(!1),P(null)},1e4);const e=l.filter((c,s)=>s!==o);u(e),h===o?m(e.length>0?Math.max(0,o-1):null):h>o&&m(h-1),await O({characters:e})},re=()=>{if(!_)return;j.current&&clearTimeout(j.current);const o=[...l];o.splice(_.index,0,_.character),u(o),(h===null||h>=_.index)&&m(_.index),I(!1),P(null)},ce=async(o,t)=>{const e=l.map((c,s)=>s===o?{...c,name:t}:c);u(e),await O({characters:e})},ne=(o,t,e)=>{console.log("🎯 TOGGLE: Boss toggle called:",{charIdx:o,bossName:t,difficulty:e}),console.log("🎯 TOGGLE: Current characters before change:",l.map(s=>{var f;return{name:s.name,bosses:((f=s.bosses)==null?void 0:f.map(n=>`${n.name}-${n.difficulty}`))||[]}}));const a=l.map((s,f)=>f!==o?s:e?s.bosses.find(n=>n.name===t)?(console.log("🎯 TOGGLE: Updating existing boss:",t,"to difficulty:",e),{...s,bosses:s.bosses.map(n=>n.name===t?{...n,difficulty:e,price:D(T.find(E=>E.name===t),e),partySize:A(t,e)[0]||1}:n)}):s.bosses.length<G.CHARACTER_BOSS_CAP?(console.log("🎯 TOGGLE: Adding new boss:",t,"with difficulty:",e),{...s,bosses:[...s.bosses,{name:t,difficulty:e,price:D(T.find(n=>n.name===t),e),partySize:A(t,e)[0]||1}]}):s:s.bosses.find(E=>E.name===t)?(console.log("🎯 TOGGLE: Removing boss:",t),{...s,bosses:s.bosses.filter(E=>E.name!==t)}):s);console.log("🎯 TOGGLE: New characters after change:",a.map(s=>{var f;return{name:s.name,bosses:((f=s.bosses)==null?void 0:f.map(n=>`${n.name}-${n.difficulty}`))||[]}})),u(a),console.log("🎯 TOGGLE: setCharacters called"),console.log("🎯 TOGGLE: About to call preserveCheckedStateOnBossChange"),B(a),(async()=>{await O({characters:a})})().catch(console.error)},le=(o,t)=>{const e=l.map((c,s)=>{if(s!==o)return c;const f=t.map(n=>({name:n.name,difficulty:n.difficulty,price:D(T.find(E=>E.name===n.name),n.difficulty),partySize:n.partySize||A(n.name,n.difficulty)[0]||1}));return{...c,bosses:f}});u(e),B(e),(async()=>{await O({characters:e})})().catch(console.error)},ie=async(o,t,e,a)=>{const c=l.map((f,n)=>n!==o?f:{...f,bosses:f.bosses.map(E=>E.name===t&&E.difficulty===e?{...E,partySize:a}:E)});u(c),await O({characters:c})};return y.useEffect(()=>{h>=l.length&&m(Math.max(0,l.length-1))},[l.length,h]),{characters:l,setCharacters:u,newCharName:r,setNewCharName:p,selectedCharIdx:h,setSelectedCharIdx:m,error:i,setError:g,isLoading:S,setIsLoading:C,checked:k,setChecked:$,cloneError:N,setCloneError:M,showUndo:V,undoData:_,fileInputRef:J,importError:F,setImportError:z,importSuccess:U,setImportSuccess:H,charTotal:q,overallTotal:Q,sortedBossData:W,totalBossCount:X,getAvailablePartySizes:A,getBossDifficulties:Y,handleCharacterChange:te,addCharacter:oe,removeCharacter:ae,handleUndo:re,toggleBoss:ne,updateCharacterName:ce,updatePartySize:ie,batchSetBosses:le,refreshCheckedStateFromBossRuns:Z,preserveCheckedStateOnBossChange:B,preservingCheckedStateRef:w}}function Ee({checked:d,onChange:b,disabled:l=!1}){return v.jsxs("div",{className:"checkbox-wrapper",style:{transform:"scale(0.8)",opacity:l?.5:1,cursor:l?"not-allowed":"pointer"},children:[v.jsx("input",{type:"checkbox",checked:d,onChange:b,disabled:l,style:{background:"#3a335a",color:"#e6e0ff",border:"1.5px solid #2d2540",cursor:l?"not-allowed":"pointer"}}),v.jsxs("svg",{viewBox:"0 0 35.6 35.6",children:[v.jsx("circle",{className:"background",cx:"17.8",cy:"17.8",r:"17.8"}),v.jsx("circle",{className:"stroke",cx:"17.8",cy:"17.8",r:"14.37"}),v.jsx("polyline",{className:"check",points:"11.78 18.12 15.55 22.23 25.17 12.87"})]})]})}export{Ee as C,be as u};
