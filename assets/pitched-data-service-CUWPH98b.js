const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/supabaseClient-B7fnwhYs.js","assets/vendor-supabase-B7S7y5aO.js","assets/vendor-react-eWEExxYH.js","assets/Navbar-Dj_w0RSM.js","assets/vendor-ui-DqxmAIBo.js","assets/vendor-router-BPn28yDh.js","assets/index-CiClp0FW.js","assets/index-C9_Ifi-v.css"])))=>i.map(i=>d[i]);
import{_ as P}from"./vendor-supabase-B7S7y5aO.js";import{a as T}from"./Navbar-Dj_w0RSM.js";import"./vendor-react-eWEExxYH.js";import"./vendor-ui-DqxmAIBo.js";import"./vendor-router-BPn28yDh.js";import"./index-CiClp0FW.js";function $(){return T()}async function q(){const{supabase:s}=await P(async()=>{const{supabase:e}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:e}},__vite__mapDeps([0,1,2]));return s}function H(s){if(!s)return null;try{const e=new Date(s),t=new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),a=new Date(t.getUTCFullYear(),0,1),o=Math.ceil(((t-a)/864e5+a.getUTCDay()+1)/7);return`${t.getUTCFullYear()}-${o}`}catch(e){return console.error("Error getting week key from date:",e),null}}async function V(s,e){var t,a;try{console.log("saveBossRun called with:",{userCode:s,data:e});const{character:o,characterIdx:r,bossName:n,bossDifficulty:c,isCleared:g,date:m}=e;if(!s||!o||!n||!c||g===void 0)return console.error("Missing required fields:",{userCode:s,character:o,bossName:n,bossDifficulty:c,isCleared:g}),{success:!1,error:"Missing required fields"};const f=await q(),{data:i,error:h}=await f.from("user_data").select("*").eq("id",s).single();if(h)throw console.error("Error fetching user data:",h),h;if(!i)throw console.error("No user data found"),new Error("No user data found");const d=i.data?JSON.parse(JSON.stringify(i.data)):{};d.boss_runs?Array.isArray(d.boss_runs)||(console.log("boss_runs exists but is not an array, fixing this issue"),d.boss_runs=[]):(d.boss_runs=[],console.log("Initializing missing boss_runs array in data object"));const l=d.boss_runs,u=$();console.log(`Current boss runs count: ${l.length}`),console.log("Current data structure:",JSON.stringify(d,null,2));const w=l.findIndex(y=>y.character===o&&y.boss===n&&y.difficulty===c&&y.weekKey===u);let p;if(g){const y={id:`${o}-${n}-${c}-${u}-${Date.now()}`,character:o,characterIdx:r||0,boss:n,difficulty:c,cleared:!0,date:m||new Date().toISOString(),weekKey:u};w!==-1?(p=[...l],p[w]={...p[w],cleared:!0,date:m||new Date().toISOString(),lastUpdated:new Date().toISOString()},console.log(`Updating existing boss run at index ${w}`)):(p=[...l,y],console.log(`Adding new boss run, total count will be ${p.length}`))}else w!==-1?(p=l.filter((y,_)=>_!==w),console.log(`Removing boss run at index ${w}, total count will be ${p.length}`)):(p=[...l],console.log("No existing boss run found to remove"));const D={...d,boss_runs:p,lastUpdated:new Date().toISOString()};console.log("About to save this data structure:",JSON.stringify({...D,boss_runs_count:p.length},null,2).substring(0,200)+"...");const k={...d,boss_runs:p,lastUpdated:new Date().toISOString()};console.log("SIMPLIFIED DATA STRUCTURE:",JSON.stringify(k).substring(0,200)+"..."),console.log("🚨 ATTEMPTING DATABASE UPDATE WITH BOSS RUNS ARRAY");const{data:R,error:I}=await f.from("user_data").update({data:k}).eq("id",s).select();if(console.log("UPDATE RESULT:",JSON.stringify(R)),I)throw console.error("Database update error:",I),I;console.log(`Successfully ${g?"saved":"removed"} boss run for ${o} - ${n} ${c}. Cleared: ${g}`),console.log("🔍 VERIFYING DATABASE STATE WITH SEPARATE FETCH");const{data:b,error:E}=await f.from("user_data").select("*").eq("id",s).single();if(E)console.error("Verification fetch error:",E);else if(console.log("DATABASE ACTUAL STATE:",JSON.stringify(b).substring(0,200)+"..."),(t=b==null?void 0:b.data)!=null&&t.boss_runs)console.log(`✅ VERIFICATION SUCCESS: Database has ${b.data.boss_runs.length} boss runs`);else{console.log("❌ VERIFICATION FAILED: No boss_runs array found in database"),console.log("⚠️ Attempting UPSERT as a fallback...");const y={id:s,data:{...b.data,boss_runs:p,lastUpdated:new Date().toISOString()}},{error:_}=await f.from("user_data").upsert(y);if(_)console.error("Upsert failed:",_);else{console.log("✅ Upsert succeeded, verifying again...");const{data:S}=await f.from("user_data").select("*").eq("id",s).single();(a=S==null?void 0:S.data)!=null&&a.boss_runs?console.log(`✅✅ FINAL VERIFICATION: Database now has ${S.data.boss_runs.length} boss runs`):console.log("❌❌ FINAL VERIFICATION FAILED: Still no boss_runs array")}}return{success:!0,bossRuns:p,updatedData:D}}catch(o){return console.error("Error saving boss run:",o),{success:!1,error:o}}}async function j(s,e,t=!1,a=null){try{console.log("savePitchedItem called with:",{userCode:s,data:e,remove:t,weekKey:a});const{character:o,bossName:r,itemName:n,itemImage:c,date:g,characterIdx:m}=e;if(!s||!o||!r||!n||!c)return console.error("Missing required fields:",{userCode:s,character:o,bossName:r,itemName:n,itemImage:c}),{success:!1,error:"Missing required fields"};console.log("Fetching user data for userCode:",s);const{data:f,error:i}=await supabase.from("user_data").select("pitched_items, data").eq("id",s).single();if(i)throw console.error("Error fetching user data:",i),i;const h=f.pitched_items||[],d=f.data||{},l=d.boss_runs||[],u=a||H(g)||$(),w=$(),p=u===w;if(t){console.log("Removing pitched item:",{character:o,bossName:r,itemName:n,weekKey:u});const D=h.filter(I=>!(I.character===o&&I.boss===r&&I.item===n&&I.weekKey===u));let k=d;if(p){const I=l.filter(b=>b.character===o&&b.boss===r&&b.weekKey===u&&b.hasPitchedItem===!0?(console.log(`Removing boss run with hasPitchedItem flag: ${b.boss} ${b.difficulty} for ${o}`),!1):!0);k={...d,boss_runs:I,lastUpdated:new Date().toISOString()}}const{error:R}=await supabase.from("user_data").update({pitched_items:D,...p&&{data:k}}).eq("id",s);if(R)throw R;return console.log(`Successfully removed pitched item for ${o} from ${r}. Remaining items: ${D.length}`),{success:!0}}else{const D={character:o,characterIdx:m||0,boss:r,item:n,image:c,date:g||new Date().toISOString(),weekKey:u};if(h.find(E=>E.character===o&&E.boss===r&&E.item===n&&E.weekKey===u))return console.log("Item already exists in database, not adding duplicate"),{success:!0,alreadyExists:!0};const R=[...h,D];let I=d;if(p){let E=[...l];const y=l.findIndex(_=>_.character===o&&_.boss===r&&_.weekKey===u);if(y===-1){const v=O(r).sort((x,B)=>{const A={Extreme:5,Hard:4,Chaos:3,Normal:2,Easy:1},K=x.split("-")[1],N=B.split("-")[1];return(A[N]||0)-(A[K]||0)})[0].split("-")[1];E.push({character:o,characterIdx:m||0,boss:r,difficulty:v,cleared:!0,date:g||new Date().toISOString(),weekKey:u,hasPitchedItem:!0})}else E[y]={...E[y],hasPitchedItem:!0,date:g||new Date().toISOString()};I={...d,boss_runs:E,lastUpdated:new Date().toISOString()}}else console.log(`Historical pitched item for week ${u} - not modifying boss_runs`);const{error:b}=await supabase.from("user_data").update({pitched_items:R,...p&&{data:I}}).eq("id",s);if(b)throw b;if(console.log(`Successfully saved pitched item for ${o} from ${r} (week: ${u})`),p){const y=I.checked||{},_=`${o}-${m||0}`,S=O(r);let W=!1;if(y[_]){for(const v of S)if(y[_][v]){W=!0;break}}if(!W&&S.length>0){const x=S.sort((B,A)=>{const K={Extreme:5,Hard:4,Chaos:3,Normal:2,Easy:1},N=B.split("-")[1],U=A.split("-")[1];return(K[U]||0)-(K[N]||0)})[0];y[_]||(y[_]={}),y[_][x]=!0}}return{success:!0}}return console.log("Successfully updated pitched_items and synchronized with application data"),{success:!0,data:pitchedItem,updatedWeekKey:u}}catch(o){return console.error("Error saving pitched item:",o),{success:!1,error:o.message||"Unknown error occurred"}}}async function z(s){var e;try{const{data:t,error:a}=await supabase.from("user_data").select("data").eq("id",s).single();if(a)throw a;return{success:!0,data:((e=t==null?void 0:t.data)==null?void 0:e.pitchedItems)||[]}}catch(t){return console.error("Error fetching pitched items:",t),{success:!1,error:t,data:[]}}}async function G(s){try{const{data:e,error:t}=await supabase.from("user_data").select("pitched_items").eq("id",s).single();if(t)throw t;return{success:!0,items:(e==null?void 0:e.pitched_items)||[]}}catch(e){return console.error("Error fetching all pitched items:",e),{success:!1,error:e,items:[]}}}async function Q(s,e=null){try{const{data:t,error:a}=await supabase.from("user_data").select("pitched_items").eq("id",s).single();if(a)throw a;const o=t.pitched_items||[],r={};return o.forEach(n=>{const c=new Date(n.date).getFullYear();e&&c!==parseInt(e)||(r[c]||(r[c]={total:0,characters:new Set,items:[]}),r[c].total+=1,r[c].characters.add(n.character),r[c].items.push({character:n.character,boss:n.boss,item:n.item,image:n.image,date:n.date}))}),Object.keys(r).forEach(n=>{r[n].characters=Array.from(r[n].characters)}),{success:!0,data:r}}catch(t){return console.error("Error fetching yearly pitched stats:",t),{success:!1,error:t,data:{}}}}async function X(s,e){try{const{data:t,error:a}=await supabase.from("user_data").select("pitched_items, data").eq("id",s).single();if(a)throw a;const o=t.pitched_items||[],r=t.data||{},n=r.boss_runs||[],c=$(),g=o.filter(h=>!e.some(d=>h.character===d.character&&h.boss===d.bossName&&h.item===d.itemName&&h.weekKey===d.weekKey)),m=e.filter(h=>h.weekKey===c);let f=r;if(m.length>0){const h=n.filter(d=>m.some(u=>d.character===u.character&&d.boss===u.bossName&&d.weekKey===u.weekKey&&d.hasPitchedItem===!0)?(console.log(`[Batch Removal] Removing boss run with hasPitchedItem flag: ${d.boss} ${d.difficulty} for ${d.character}`),!1):!0);f={...r,boss_runs:h,lastUpdated:new Date().toISOString()}}const{error:i}=await supabase.from("user_data").update({pitched_items:g,...m.length>0&&{data:f}}).eq("id",s);if(i)throw i;return console.log(`[Batch Removal] Successfully removed ${e.length} pitched items for user '${s}'. Remaining items: ${g.length}`),console.log("[Batch Removal] Items removed:",e),{success:!0}}catch(t){return console.error("Error removing many pitched items:",t),{success:!1,error:t}}}async function Z(s){var e;try{const{data:t,error:a}=await supabase.from("user_data").select("data, pitched_items").eq("id",s).single();if(a)throw a;return{success:!0,export:{data:t.data,pitched_items:t.pitched_items,weekKey:((e=t.data)==null?void 0:e.weekKey)||$(),exportDate:new Date().toISOString()}}}catch(t){return console.error("Error exporting user data:",t),{success:!1,error:t}}}function O(s){const e=["Easy","Normal","Hard","Chaos","Extreme"];return({Lotus:["Easy","Normal","Hard","Extreme"],Damien:["Normal","Hard"],Will:["Easy","Normal","Hard"],Lucid:["Easy","Normal","Hard"],"Chosen Seren":["Normal","Hard","Extreme"],"Watcher Kalos":["Easy","Normal","Chaos","Extreme"],Kaling:["Easy","Normal","Hard","Extreme"],Limbo:["Normal","Hard"]}[s]||e).map(o=>`${s}-${o}`)}async function ee(s,e){var t;try{if(!e||typeof e!="object")throw new Error("Invalid import object");const{data:a,pitched_items:o,weekKey:r}=e,{data:n,error:c}=await supabase.from("user_data").select("data").eq("id",s).single();if(c&&c.code!=="PGRST116")throw c;const g=$(),m=(t=n==null?void 0:n.data)==null?void 0:t.weekKey;let f={...a};r&&r!==g&&(console.log(`[Import] Week key transition: ${r} -> ${g}`),f.weekKey=g);const{error:i}=await supabase.from("user_data").update({data:f,pitched_items:o}).eq("id",s);if(i)throw i;return console.log(`[Import] Successfully imported data for user '${s}'.`),{success:!0,data:f}}catch(a){return console.error("Error importing user data:",a),{success:!1,error:a}}}async function te(s,e,t=0){try{if(console.log(`🗑️ Starting pitched records purge for character: ${e} (idx: ${t})`),!s||!e)return console.error("Missing required fields:",{userCode:s,characterName:e}),{success:!1,error:"Missing required fields"};const{data:a,error:o}=await supabase.from("user_data").select("data, pitched_items").eq("id",s).single();if(o)throw console.error("Error fetching user data:",o),o;const r=a.data||{},n=a.pitched_items||[],c=r.boss_runs||[],g=n.filter(l=>{const u=l.character===e&&(l.characterIdx===t||l.characterIndex===t);return u&&console.log(`🗑️ Removing pitched item: ${l.item} from ${l.boss} for ${e}`),!u}),m=c.filter(l=>{const u=l.character===e&&(l.characterIdx===t||l.characterIndex===t),w=l.isPitched===!0||l.hasPitchedItem===!0;return u&&w?(console.log(`🗑️ Removing pitched boss run: ${l.boss} ${l.difficulty} for ${e}`),!1):!0}),f=new Date().toISOString(),i={timestamp:f,action:"purge_pitched_records",character:e,characterIdx:t,itemsRemoved:n.length-g.length,bossRunsRemoved:c.length-m.length,userAgent:typeof navigator<"u"?navigator.userAgent:"Server"},h={...r,boss_runs:m,lastUpdated:f,pitched_reset_history:[...r.pitched_reset_history||[],i].slice(-50)},{error:d}=await supabase.from("user_data").update({pitched_items:g,data:h}).eq("id",s);if(d)throw console.error("Database update error:",d),d;return console.log(`✅ Pitched records purged successfully for ${e}`),console.log(`📊 Removed ${i.itemsRemoved} pitched items and ${i.bossRunsRemoved} boss runs`),console.log(`📊 Preserved ${m.length} non-pitched boss runs`),{success:!0,audit:i,itemsRemoved:i.itemsRemoved,bossRunsRemoved:i.bossRunsRemoved,bossRunsPreserved:m.length}}catch(a){return console.error("Error purging pitched records:",a),{success:!1,error:a.message||"Unknown error occurred"}}}async function se(s){var e;try{if(!s)return{success:!1,error:"User code is required"};const{data:t,error:a}=await supabase.from("user_data").select("data").eq("id",s).single();if(a)throw console.error("Error fetching audit history:",a),a;const r=(((e=t.data)==null?void 0:e.pitched_reset_history)||[]).sort((n,c)=>new Date(c.timestamp)-new Date(n.timestamp));return{success:!0,history:r,totalResets:r.length}}catch(t){return console.error("Error getting pitched reset audit history:",t),{success:!1,error:t.message||"Unknown error occurred"}}}function re(s,e,t,a){const o={...s};return Object.keys(o).forEach(r=>{r.startsWith(`${e}-${t}__`)&&r.endsWith(`__${a}`)&&(console.log(`🗑️ Clearing UI checkmark: ${r}`),delete o[r])}),o}async function oe(s){try{if(!s)return console.log("No user code provided for getAvailableWeeks"),{success:!1,error:"No user code provided"};const{data:e,error:t}=await supabase.from("user_data").select("data, pitched_items").eq("id",s).single();if(t)return console.error("Error fetching user data for available weeks:",t),{success:!1,error:t.message};const a=new Set,o=$();a.add(o),e.pitched_items&&Array.isArray(e.pitched_items)&&e.pitched_items.forEach(n=>{n.weekKey&&a.add(n.weekKey)}),e.data&&e.data.boss_runs&&Array.isArray(e.data.boss_runs)&&e.data.boss_runs.forEach(n=>{n.weekKey&&a.add(n.weekKey)}),e.data&&e.data.weekKey&&a.add(e.data.weekKey);const r=Array.from(a).sort((n,c)=>{const[g,m]=n.split("-").map(Number),[f,i]=c.split("-").map(Number);return g!==f?g-f:m-i});return console.log(`Found ${r.length} weeks with data:`,r),{success:!0,weeks:r,currentWeek:o,oldestWeek:r.length>0?r[0]:o,newestWeek:r.length>0?r[r.length-1]:o}}catch(e){return console.error("Error in getAvailableWeeks:",e),{success:!1,error:e.message}}}async function ae(s){try{if(console.log(`🗑️ Starting complete stats reset for user: ${s}`),!s)return console.error("Missing required field: userCode"),{success:!1,error:"Missing required field: userCode"};const{data:e,error:t}=await supabase.from("user_data").select("data, pitched_items").eq("id",s).single();if(t)throw console.error("Error fetching user data:",t),t;const a=e.data||{},o=e.pitched_items||[],r=a.boss_runs||[],n=new Date().toISOString(),c={timestamp:n,action:"complete_stats_reset",itemsRemoved:o.length,bossRunsRemoved:r.length,userAgent:typeof navigator<"u"?navigator.userAgent:"Server"},g={...a,boss_runs:[],lastUpdated:n,pitched_reset_history:[...a.pitched_reset_history||[],c].slice(-50)},{error:m}=await supabase.from("user_data").update({pitched_items:[],data:g}).eq("id",s);if(m)throw console.error("Database update error:",m),m;return console.log(`✅ Complete stats reset successful for user ${s}`),console.log(`📊 Removed ${c.itemsRemoved} pitched items and ${c.bossRunsRemoved} boss runs`),{success:!0,audit:c,itemsRemoved:c.itemsRemoved,bossRunsRemoved:c.bossRunsRemoved}}catch(e){return console.error("Error in complete stats reset:",e),{success:!1,error:e.message||"Unknown error occurred"}}}async function ne(s,e){try{if(console.log("saveBatchBossRuns called with:",{userCode:s,count:e.length}),!s||!Array.isArray(e)||e.length===0)return console.error("Invalid parameters for batch boss runs"),{success:!1,error:"Invalid parameters"};for(const i of e){const{character:h,characterIdx:d,bossName:l,bossDifficulty:u,isCleared:w,date:p}=i;if(!h||!l||!u||w===void 0)return console.error("Missing required fields in batch entry:",i),{success:!1,error:"Missing required fields in batch entry"}}const{data:t,error:a}=await supabase.from("user_data").select("*").eq("id",s).single();if(a)throw console.error("Error fetching user data for batch update:",a),a;if(!t)throw console.error("No user data found for batch update"),new Error("No user data found");const o=t.data?JSON.parse(JSON.stringify(t.data)):{};(!o.boss_runs||!Array.isArray(o.boss_runs))&&(o.boss_runs=[],console.log("Initializing boss_runs array for batch update"));const r=[...o.boss_runs],n=$();console.log(`Starting batch update with ${r.length} existing boss runs`);let c=[...r];for(const i of e){const{character:h,characterIdx:d,bossName:l,bossDifficulty:u,isCleared:w,date:p}=i,D=c.findIndex(k=>k.character===h&&k.boss===l&&k.difficulty===u&&k.weekKey===n);if(w){const k={id:`${h}-${l}-${u}-${n}-${Date.now()}`,character:h,characterIdx:d||0,boss:l,difficulty:u,cleared:!0,date:p||new Date().toISOString(),weekKey:n};D!==-1?(c[D]={...c[D],cleared:!0,date:p||new Date().toISOString(),lastUpdated:new Date().toISOString()},console.log(`Batch: Updating existing boss run for ${l} ${u}`)):(c.push(k),console.log(`Batch: Adding new boss run for ${l} ${u}`))}else D!==-1&&(c=c.filter((k,R)=>R!==D),console.log(`Batch: Removing boss run for ${l} ${u}`))}const g={...o,boss_runs:c,lastUpdated:new Date().toISOString()};console.log(`Batch update: ${r.length} → ${c.length} boss runs`);const{data:m,error:f}=await supabase.from("user_data").update({data:g}).eq("id",s).select();if(f)throw console.error("Batch database update error:",f),f;return console.log(`✅ Batch boss runs update successful: ${e.length} operations completed`),{success:!0,updatedCount:e.length,totalBossRuns:c.length}}catch(t){return console.error("Error in saveBatchBossRuns:",t),{success:!1,error:t.message}}}async function ce(s){try{if(!s)return console.log("No user code provided for getHistoricalWeekAnalysis"),{success:!1,error:"No user code provided"};console.log("🔍 Analyzing historical week data for user:",s);const{data:e,error:t}=await supabase.from("user_data").select("data, pitched_items").eq("id",s).single();if(t)return console.error("Error fetching user data for historical analysis:",t),{success:!1,error:t.message};const a=$();console.log("📅 Current week:",a),console.log("📊 Raw user data:",{pitchedItemsCount:e.pitched_items?e.pitched_items.length:0,bossRunsCount:e.data&&e.data.boss_runs?e.data.boss_runs.length:0});const o=new Set;e.pitched_items&&Array.isArray(e.pitched_items)?(console.log("🔍 Checking pitched_items for historical weeks..."),e.pitched_items.forEach((i,h)=>{console.log(`  Item ${h}:`,{weekKey:i.weekKey,character:i.character,boss:i.boss,item:i.item,isCurrentWeek:i.weekKey===a}),i.weekKey&&i.weekKey!==a&&(o.add(i.weekKey),console.log(`    ✅ Added historical week: ${i.weekKey}`))})):console.log("❌ No pitched_items found or not an array"),e.data&&e.data.boss_runs&&Array.isArray(e.data.boss_runs)?(console.log("🔍 Checking boss_runs for historical weeks..."),e.data.boss_runs.forEach((i,h)=>{console.log(`  Run ${h}:`,{weekKey:i.weekKey,character:i.character,boss:i.boss,isCurrentWeek:i.weekKey===a}),i.weekKey&&i.weekKey!==a&&(o.add(i.weekKey),console.log(`    ✅ Added historical week: ${i.weekKey}`))})):console.log("❌ No boss_runs found or not an array"),console.log("📋 Found historical weeks:",Array.from(o));const r=Array.from(o).sort((i,h)=>{const d=w=>{const p=w.split("-");return p.length===2?{year:parseInt(p[0]),week:parseInt(p[1])}:p.length===3?{year:parseInt(p[0]),week:parseInt(p[1])}:{year:0,week:0}},l=d(i),u=d(h);return l.year!==u.year?l.year-u.year:l.week-u.week}),n=r.length>0;let c=null,g="new",m=8;if(n){c=r[0];const{getWeekOffset:i}=await P(async()=>{const{getWeekOffset:l}=await import("./Navbar-Dj_w0RSM.js").then(u=>u.w);return{getWeekOffset:l}},__vite__mapDeps([3,4,5,2,6,1,7])),h=i(c),d=Math.abs(h);d>8?(g="existing",m=d,console.log(`📊 Existing user detected: ${d} weeks of history, adaptive limit: ${m}`)):(g="new",console.log(`📊 New user detected: ${d} weeks of history, standard limit: ${m}`))}const f={success:!0,hasHistoricalData:n,oldestHistoricalWeek:c,historicalWeeks:r,totalHistoricalWeeks:r.length,userType:g,adaptiveWeekLimit:m,currentWeek:a,analysis:{pitchedItemsCount:e.pitched_items?e.pitched_items.length:0,bossRunsCount:e.data&&e.data.boss_runs?e.data.boss_runs.length:0,weeksWithData:r.length+1}};return console.log("📈 Historical week analysis result:",{userType:f.userType,hasHistoricalData:f.hasHistoricalData,oldestWeek:f.oldestHistoricalWeek,adaptiveLimit:f.adaptiveWeekLimit,totalWeeks:f.totalHistoricalWeeks}),f}catch(e){return console.error("Error in getHistoricalWeekAnalysis:",e),{success:!1,error:e.message}}}export{re as clearCharacterPitchedUI,Z as exportUserData,G as getAllPitchedItems,oe as getAvailableWeeks,$ as getCurrentWeekKey,ce as getHistoricalWeekAnalysis,z as getPitchedItems,se as getPitchedResetAuditHistory,Q as getYearlyPitchedStats,ee as importUserData,ae as purgeAllStatsData,te as purgePitchedRecords,X as removeManyPitchedItems,ne as saveBatchBossRuns,V as saveBossRun,j as savePitchedItem};
