const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/supabaseClient-B7fnwhYs.js","assets/vendor-supabase-B7S7y5aO.js","assets/vendor-react-eWEExxYH.js","assets/pitched-data-service-hqf7KOUT.js","assets/Navbar-C88T-MOZ.js","assets/vendor-ui-DqxmAIBo.js","assets/vendor-router-BPn28yDh.js","assets/index-CFYAW1g3.js","assets/index-C9_Ifi-v.css"])))=>i.map(i=>d[i]);
import{_ as P}from"./vendor-supabase-B7S7y5aO.js";import{r as b}from"./vendor-router-BPn28yDh.js";import{u as me,L as z}from"./index-CFYAW1g3.js";import{g as M,b as L}from"./Navbar-C88T-MOZ.js";import{j as O}from"./vendor-ui-DqxmAIBo.js";function Ee(d,y){const i=b.useMemo(()=>f=>f.bosses.reduce((p,A)=>p+Math.ceil((A.price||0)/(A.partySize||1)),0),[]),h=b.useMemo(()=>d.reduce((f,p)=>f+i(p),0),[d,i]),c=b.useMemo(()=>[...y].sort((f,p)=>{const A=Math.max(...f.difficulties.map(x=>x.price));return Math.max(...p.difficulties.map(x=>x.price))-A}),[y]),E=b.useMemo(()=>d.reduce((f,p)=>{var A;return f+(((A=p.bosses)==null?void 0:A.length)||0)},0),[d]),g=b.useMemo(()=>(f,p)=>f==="Limbo"?[1,2,3]:f==="Lotus"&&p==="Extreme"?[1,2]:[1,2,3,4,5,6],[]),m=b.useMemo(()=>f=>f.difficulties.map(p=>p.difficulty),[]);return{charTotal:i,overallTotal:h,sortedBossData:c,totalBossCount:E,getAvailablePartySizes:g,getBossDifficulties:m}}function be(d){const y=[],i=new Set,h={};return console.log("🔍 Extracting characters from data structure..."),d.boss_runs&&Array.isArray(d.boss_runs)&&d.boss_runs.forEach(c=>{if(c.character&&typeof c.characterIdx=="number"){const E=`${c.character}-${c.characterIdx}`;if(i.has(E)||(i.add(E),y.push({name:c.character,index:c.characterIdx,bosses:[]}),console.log(`✅ Found character from boss_runs: ${c.character} (index: ${c.characterIdx})`)),h[E]||(h[E]=new Set),c.boss&&c.difficulty){const g=`${c.boss}-${c.difficulty}`;h[E].has(g)||(h[E].add(g),console.log(`📋 Found boss from boss_runs for ${c.character}: ${c.boss} (${c.difficulty})`))}}}),d.checked&&typeof d.checked=="object"&&Object.keys(d.checked).forEach(c=>{const E=c.split("-");if(E.length>=2){const g=E.slice(0,-1).join("-"),m=parseInt(E[E.length-1]);if(!isNaN(m)&&g){const f=`${g}-${m}`;i.has(f)||(i.add(f),y.push({name:g,index:m,bosses:[]}),console.log(`✅ Found character from checked (legacy): ${g} (index: ${m})`)),h[f]||(h[f]=new Set),Object.keys(d.checked[c]||{}).forEach(p=>{const A=p.split("-");if(A.length>=2){const w=A[A.length-1],x=A.slice(0,-1).join("-"),R=`${x}-${w}`;h[f].has(R)||(h[f].add(R),console.log(`📋 Found boss from checked for ${g}: ${x} (${w})`))}})}}}),d.weeklyBossClearHistory&&typeof d.weeklyBossClearHistory=="object"&&Object.values(d.weeklyBossClearHistory).forEach(c=>{c.bossClearStatus&&typeof c.bossClearStatus=="object"&&Object.keys(c.bossClearStatus).forEach(E=>{const g=E.split("-");if(g.length>=2){const m=g.slice(0,-1).join("-"),f=parseInt(g[g.length-1]);if(!isNaN(f)&&m){const p=`${m}-${f}`;i.has(p)||(i.add(p),y.push({name:m,index:f,bosses:[]}),console.log(`✅ Found character from weeklyBossClearHistory: ${m} (index: ${f})`)),h[p]||(h[p]=new Set),Object.keys(c.bossClearStatus[E]||{}).forEach(A=>{const w=A.split("-");if(w.length>=2){const x=w[w.length-1],R=w.slice(0,-1).join("-"),_=`${R}-${x}`;h[p].has(_)||(h[p].add(_),console.log(`📋 Found boss from history for ${m}: ${R} (${x})`))}})}}})}),y.forEach(c=>{const E=`${c.name}-${c.index}`,g=h[E];g&&g.size>0&&(c.bosses=Array.from(g).map(m=>{const f=m.split("-"),p=f[f.length-1];return{name:f.slice(0,-1).join("-"),difficulty:p,partySize:1,price:0}}),console.log(`🎯 Populated ${c.bosses.length} bosses for ${c.name}:`,c.bosses.map(m=>`${m.name}-${m.difficulty}`)))}),y.sort((c,E)=>c.index-E.index),console.log(`🎯 Extracted ${y.length} characters with bosses:`,y.map(c=>`${c.name}-${c.index} (${c.bosses.length} bosses)`)),y}function ke(){const{userCode:d,isLoggedIn:y}=me(),[i,h]=b.useState([]),[c,E]=b.useState(""),[g,m]=b.useState(null),[f,p]=b.useState(""),[A,w]=b.useState(!1),[x,R]=b.useState({}),_=b.useRef(!1),B=t=>{console.log("🔄 STATE: setChecked called with:",JSON.stringify(t,null,2)),console.log("🔄 STATE: Previous checked state was:",JSON.stringify(x,null,2)),console.log("🔄 STATE: Preservation flag is:",_.current),R(t)},[U,J]=b.useState(""),[q,V]=b.useState(!1),[T,N]=b.useState(null),[H,W]=b.useState(""),[Q,X]=b.useState(!1),Y=b.useRef(null),v=b.useRef(null),{charTotal:Z,overallTotal:K,sortedBossData:ee,totalBossCount:se,getAvailablePartySizes:j,getBossDifficulties:te}=Ee(i,L);b.useEffect(()=>{if(!d||!y){h([]),R({}),p("");return}(async()=>{var a;try{p(""),console.log("Loading data for user:",d);const{supabase:s}=await P(async()=>{const{supabase:e}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:e}},__vite__mapDeps([0,1,2])),{data:o,error:n}=await s.from("user_data").select("data").eq("id",d).single();if(n){if(n.code==="PGRST116"){console.log("No existing data found for user, starting fresh"),h([]),B({});return}throw n}if(o&&o.data){const e=o.data;if(console.log("📊 Raw user data:",e),console.log("📊 Characters found:",e.characters),console.log("📊 Boss runs found:",((a=e.boss_runs)==null?void 0:a.length)||0),e.characters&&Array.isArray(e.characters))h(e.characters),console.log("✅ Loaded characters (old format):",e.characters.length,e.characters);else{const r=be(e);h(r),console.log("✅ Loaded characters (new format):",r.length,r)}const u={};e.boss_runs&&Array.isArray(e.boss_runs)&&(e.boss_runs.forEach(r=>{if(r.cleared){const l=`${r.character}-${r.characterIdx||0}`,S=`${r.boss}-${r.difficulty}`;u[l]||(u[l]={}),u[l][S]=!0}}),console.log("✅ Reconstructed checked state from boss_runs:",Object.keys(u).length,"characters")),Object.keys(u).length===0&&e.checked&&typeof e.checked=="object"?(console.log("📊 LOAD: Setting checked state from legacy data:",JSON.stringify(e.checked,null,2)),B(e.checked),console.log("✅ LOAD: Loaded legacy checked state:",Object.keys(e.checked).length,"entries")):(console.log("📊 LOAD: Setting checked state from boss_runs:",JSON.stringify(u,null,2)),B(u),console.log("✅ LOAD: Using reconstructed checked state from boss_runs"))}else console.log("No data found, starting fresh"),h([]),B({})}catch(s){console.error("Error loading user data:",s),p("Failed to load user data. Please try refreshing the page.")}})()},[d,y]);const oe=async()=>{if(!(!d||!y)){try{console.log("🔄 Refreshing checked state from boss runs...");const{supabase:t}=await P(async()=>{const{supabase:o}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:o}},__vite__mapDeps([0,1,2])),{data:a,error:s}=await t.from("user_data").select("data").eq("id",d).single();if(s)throw s;if(a&&a.data&&a.data.boss_runs&&Array.isArray(a.data.boss_runs)){const o={};return a.data.boss_runs.forEach(n=>{if(n.cleared){const e=`${n.character}-${n.characterIdx||0}`,u=`${n.boss}-${n.difficulty}`;o[e]||(o[e]={}),o[e][u]=!0}}),console.log("✅ Refreshed checked state from boss_runs:",Object.keys(o).length,"characters"),B(o),o}}catch(t){console.error("Error refreshing checked state from boss runs:",t)}return null}},ae=t=>{const a=t.split("-");if(a.length>=2){const s=parseInt(a[a.length-1]);return[a.slice(0,-1).join("-"),s]}return[t,0]},re=(t,a,s)=>t.find((o,n)=>o.name===a&&(o.index===s||n===s)),ne=(t,a)=>{const s={...a};return console.log("🧹 Cleaning up checked state based on new boss selections..."),console.log("📊 Current checked state:",a),console.log("📋 New characters:",t.map(o=>{var n;return`${o.name} (${((n=o.bosses)==null?void 0:n.length)||0} bosses)`})),Object.keys(s).forEach(o=>{const[n,e]=ae(o),u=re(t,n,e);if(!u)console.log(`🗑️ Removing all entries for deleted character: ${o}`),delete s[o];else{const r=(u.bosses||[]).map(S=>`${S.name}-${S.difficulty}`),l=Object.keys(s[o]||{});console.log(`🔍 Character ${n}: Current bosses [${r.join(", ")}], Checked bosses [${l.join(", ")}]`),l.forEach(S=>{r.includes(S)?console.log(`✅ Preserving checked state for: ${n} - ${S}`):(console.log(`🗑️ Removing checked state for deselected boss: ${n} - ${S}`),delete s[o][S])}),Object.keys(s[o]||{}).length===0&&delete s[o]}}),console.log("🎯 Final cleaned checked state:",s),s},ce=async(t,a)=>{if(!(!d||!y))try{const s=new Date().toISOString();console.log(`🧹 DATABASE: Starting boss_runs cleanup at ${s}...`),console.log("🧹 DATABASE: New characters structure:",t.map(($,C)=>{var k;return{name:$.name,arrayIndex:C,characterIndex:$.index,bosses:((k=$.bosses)==null?void 0:k.map(I=>`${I.name}-${I.difficulty}`))||[]}}));const{supabase:o}=await P(async()=>{const{supabase:$}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:$}},__vite__mapDeps([0,1,2]));console.log("🧹 DATABASE: Fetching current database state...");const{data:n,error:e}=await o.from("user_data").select("data").eq("id",d).single();if(e){console.error("Error fetching user data for boss_runs cleanup:",e);return}const u=n.data||{},r=u.boss_runs||[];if(console.log(`🧹 DATABASE: Found ${r.length} boss_runs in database:`),r.forEach(($,C)=>{console.log(`  ${C+1}. ${$.character}-${$.characterIdx}-${$.boss}-${$.difficulty} (${$.weekKey})`)}),r.length===0){console.log("🧹 DATABASE: No boss_runs to clean up");return}const l=new Set;t.forEach(($,C)=>{var k;(k=$.bosses)==null||k.forEach(I=>{const F=`${$.name}-${C}-${I.name}-${I.difficulty}`;l.add(F),console.log(`🧹 DATABASE: Adding valid combination: ${F}`)})}),console.log("🧹 DATABASE: Valid boss combinations:",Array.from(l));const S=r.filter($=>{const C=`${$.character}-${$.characterIdx||0}-${$.boss}-${$.difficulty}`,k=l.has(C);return console.log(`🧹 DATABASE: Checking run: ${C} - Valid: ${k}`),console.log(k?`✅ DATABASE: WILL KEEP valid boss_run: ${C}`:`🗑️ DATABASE: WILL REMOVE invalid boss_run: ${C}`),k});if(S.length!==r.length){console.log(`🧹 DATABASE: Changes detected! ${r.length} → ${S.length}`);const $={...u,boss_runs:S,lastUpdated:new Date().toISOString()};console.log("🧹 DATABASE: Updating database with filtered boss_runs...");const{error:C}=await o.from("user_data").update({data:$}).eq("id",d);C?console.error("❌ DATABASE: Error updating boss_runs:",C):(console.log(`✅ DATABASE: Successfully cleaned up boss_runs: ${r.length} → ${S.length}`),console.log("✅ DATABASE: Remaining boss_runs:"),S.forEach((k,I)=>{console.log(`  ${I+1}. ${k.character}-${k.characterIdx}-${k.boss}-${k.difficulty}`)}))}else console.log("🧹 DATABASE: No boss_runs cleanup needed - no changes detected")}catch(s){console.error("❌ DATABASE: Error in cleanupBossRunsInDatabase:",s)}},G=async t=>{if(console.log("🔄 PRESERVE: Starting preservation process..."),console.log("🔄 PRESERVE: userCode:",d,"isLoggedIn:",y),!d||!y){console.log("❌ PRESERVE: Skipping - no userCode or not logged in");return}console.log("🔄 PRESERVE: Current checked state before preservation:",JSON.stringify(x,null,2)),console.log("🔄 PRESERVE: New characters data:",t.map((s,o)=>{var n;return{name:s.name,arrayIndex:o,characterIndex:s.index,bosses:((n=s.bosses)==null?void 0:n.map(e=>`${e.name}-${e.difficulty}`))||[]}})),_.current=!0,console.log("🔒 PRESERVE: Flag set to prevent overwrites");const a=ne(t,x);console.log("🔄 PRESERVE: Cleaned checked state:",JSON.stringify(a,null,2)),B(a),console.log("✅ PRESERVE: debugSetChecked called with cleaned state"),console.log("🔄 PRESERVE: About to call cleanupBossRunsInDatabase..."),await ce(t),console.log("✅ PRESERVE: cleanupBossRunsInDatabase completed");try{console.log("🔄 PRESERVE: About to call cleanupOrphanedPitchedItems...");const{cleanupOrphanedPitchedItems:s}=await P(async()=>{const{cleanupOrphanedPitchedItems:n}=await import("./pitched-data-service-hqf7KOUT.js");return{cleanupOrphanedPitchedItems:n}},__vite__mapDeps([3,1,2,4,5,6,7,8])),o=await s(d,t);o.success&&o.itemsRemoved>0?console.log(`🧹 PRESERVE: Cleaned up ${o.itemsRemoved} orphaned pitched items`):console.log("🧹 PRESERVE: No orphaned pitched items to clean up")}catch(s){console.error("Error cleaning up orphaned pitched items:",s)}setTimeout(()=>{_.current=!1,console.log("🔓 PRESERVE: Flag cleared - other hooks can now update")},500),console.log("✅ PRESERVE: Preservation process completed")},D=async t=>{if(!(!d||!y))try{const{supabase:a}=await P(async()=>{const{supabase:r}=await import("./supabaseClient-B7fnwhYs.js");return{supabase:r}},__vite__mapDeps([0,1,2])),{data:s,error:o}=await a.from("user_data").select("data").eq("id",d).single();if(o&&o.code!=="PGRST116")throw o;const n=(s==null?void 0:s.data)||{},e={...n,...t,lastUpdated:new Date().toISOString()};console.log("💾 SAVE: Merging data - existing keys:",Object.keys(n),"new keys:",Object.keys(t));const{error:u}=await a.from("user_data").update({data:e}).eq("id",d);if(u)throw u;console.log("Data saved to cloud successfully")}catch(a){console.error("Error saving to cloud:",a)}},le=t=>{w(!0),m(t.target.value?parseInt(t.target.value):null),setTimeout(()=>w(!1),300)},ie=async()=>{if(!c.trim()||i.length>=z.CHARACTER_CAP)return;const t=i.length>0?Math.max(...i.map(n=>n.index||0))+1:0,a={name:c.trim(),index:t,bosses:[]},s=[...i,a];h(s),E(""),await D({characters:s})},de=async t=>{if(t<0||t>=i.length)return;const a=i[t];N({character:a,index:t,timestamp:Date.now()}),V(!0),v.current&&clearTimeout(v.current),v.current=setTimeout(()=>{V(!1),N(null)},1e4);const s=i.filter((n,e)=>e!==t);h(s),g===t?m(s.length>0?Math.max(0,t-1):null):g>t&&m(g-1),await D({characters:s})},ue=()=>{if(!T)return;v.current&&clearTimeout(v.current);const t=[...i];t.splice(T.index,0,T.character),h(t),(g===null||g>=T.index)&&m(T.index),V(!1),N(null)},fe=async(t,a)=>{const s=i.map((n,e)=>e===t?{...n,name:a}:n);h(s),await D({characters:s})},he=(t,a,s)=>{console.log("🎯 TOGGLE: Boss toggle called:",{charIdx:t,bossName:a,difficulty:s}),console.log("🎯 TOGGLE: Current characters before change:",i.map((e,u)=>{var r;return{name:e.name,arrayIndex:u,characterIndex:e.index,bosses:((r=e.bosses)==null?void 0:r.map(l=>`${l.name}-${l.difficulty}`))||[]}}));const o=i.map((e,u)=>{if(u!==t)return e;if(!s)return e.bosses.find(S=>S.name===a)?(console.log("🎯 TOGGLE: Removing boss entirely:",a),{...e,bosses:e.bosses.filter(S=>S.name!==a)}):e;const r=e.bosses.find(l=>l.name===a);return r?(console.log("🎯 TOGGLE: Updating existing boss:",a,"from",r.difficulty,"to",s),{...e,bosses:e.bosses.map(l=>l.name===a?{...l,difficulty:s,price:M(L.find(S=>S.name===a),s),partySize:j(a,s)[0]||1}:l)}):e.bosses.length<z.CHARACTER_BOSS_CAP?(console.log("🎯 TOGGLE: Adding new boss:",a,"with difficulty:",s),{...e,bosses:[...e.bosses,{name:a,difficulty:s,price:M(L.find(l=>l.name===a),s),partySize:j(a,s)[0]||1}]}):e});console.log("🎯 TOGGLE: New characters after change:",o.map((e,u)=>{var r;return{name:e.name,arrayIndex:u,characterIndex:e.index,bosses:((r=e.bosses)==null?void 0:r.map(l=>`${l.name}-${l.difficulty}`))||[]}})),h(o),console.log("🎯 TOGGLE: setCharacters called"),console.log("🎯 TOGGLE: About to call preserveCheckedStateOnBossChange"),console.log("🎯 TOGGLE: Passing newCharacters to preservation:",JSON.stringify(o.map((e,u)=>{var r;return{name:e.name,arrayIndex:u,bosses:((r=e.bosses)==null?void 0:r.map(l=>`${l.name}-${l.difficulty}`))||[]}}),null,2)),G(o).catch(console.error),(async()=>{await D({characters:o})})().catch(console.error)},ge=(t,a)=>{const s=i.map((n,e)=>{if(e!==t)return n;const u=a.map(r=>({name:r.name,difficulty:r.difficulty,price:M(L.find(l=>l.name===r.name),r.difficulty),partySize:r.partySize||j(r.name,r.difficulty)[0]||1}));return{...n,bosses:u}});h(s),G(s).catch(console.error),(async()=>{await D({characters:s})})().catch(console.error)},pe=async(t,a,s,o)=>{const n=i.map((u,r)=>r!==t?u:{...u,bosses:u.bosses.map(l=>l.name===a&&l.difficulty===s?{...l,partySize:o}:l)});h(n),await D({characters:n})};return b.useEffect(()=>{g>=i.length&&m(Math.max(0,i.length-1))},[i.length,g]),{characters:i,setCharacters:h,newCharName:c,setNewCharName:E,selectedCharIdx:g,setSelectedCharIdx:m,error:f,setError:p,isLoading:A,setIsLoading:w,checked:x,setChecked:R,cloneError:U,setCloneError:J,showUndo:q,undoData:T,fileInputRef:Y,importError:H,setImportError:W,importSuccess:Q,setImportSuccess:X,charTotal:Z,overallTotal:K,sortedBossData:ee,totalBossCount:se,getAvailablePartySizes:j,getBossDifficulties:te,handleCharacterChange:le,addCharacter:ie,removeCharacter:de,handleUndo:ue,toggleBoss:he,updateCharacterName:fe,updatePartySize:pe,batchSetBosses:ge,refreshCheckedStateFromBossRuns:oe,preserveCheckedStateOnBossChange:G,preservingCheckedStateRef:_}}function Ce({checked:d,onChange:y,disabled:i=!1}){return O.jsxs("div",{className:"checkbox-wrapper",style:{transform:"scale(0.8)",opacity:i?.5:1,cursor:i?"not-allowed":"pointer"},children:[O.jsx("input",{type:"checkbox",checked:d,onChange:y,disabled:i,style:{background:"#3a335a",color:"#e6e0ff",border:"1.5px solid #2d2540",cursor:i?"not-allowed":"pointer"}}),O.jsxs("svg",{viewBox:"0 0 35.6 35.6",children:[O.jsx("circle",{className:"background",cx:"17.8",cy:"17.8",r:"17.8"}),O.jsx("circle",{className:"stroke",cx:"17.8",cy:"17.8",r:"14.37"}),O.jsx("polyline",{className:"check",points:"11.78 18.12 15.55 22.23 25.17 12.87"})]})]})}export{Ce as C,ke as u};
