const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/supabaseClient-D8oTKsok.js","assets/vendor-supabase-BFiW0B7-.js","assets/vendor-react-DrD-X_hS.js","assets/weekUtils-DSxD6JlE.js","assets/index-Bt_lmeqq.js","assets/vendor-ui-CuB_UNaH.js","assets/vendor-router-JN-2l_OL.js","assets/index-DB_f044c.css"])))=>i.map(i=>d[i]);
import{_ as M}from"./vendor-supabase-BFiW0B7-.js";import{getCurrentWeekKey as C}from"./weekUtils-DSxD6JlE.js";import"./vendor-react-DrD-X_hS.js";import"./index-Bt_lmeqq.js";import"./vendor-ui-CuB_UNaH.js";import"./vendor-router-JN-2l_OL.js";function A(){return C()}async function S(){const{supabase:a}=await M(async()=>{const{supabase:t}=await import("./supabaseClient-D8oTKsok.js");return{supabase:t}},__vite__mapDeps([0,1,2]));return a}function F(a){if(!a)return null;try{const t=new Date(a),e=new Date(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n=new Date(e.getUTCFullYear(),0,1),i=Math.ceil(((e-n)/864e5+n.getUTCDay()+1)/7);return`${e.getUTCFullYear()}-${i}`}catch(t){return console.error("Error getting week key from date:",t),null}}async function z(a,t){var e,n,i;try{const{character:r,characterIdx:o,bossName:c,bossDifficulty:s,isCleared:f,date:l}=t;if(!a||!r||!c||!s||f===void 0)return console.error("Missing required fields:",{userCode:a,character:r,bossName:c,bossDifficulty:s,isCleared:f}),{success:!1,error:"Missing required fields"};const p=await S(),{data:d,error:y}=await p.from("user_data").select("*").eq("id",a).single();if(y)throw console.error("Error fetching user data:",y),y;if(!d)throw console.error("No user data found"),new Error("No user data found");const u=d.data?JSON.parse(JSON.stringify(d.data)):{};u.boss_runs?Array.isArray(u.boss_runs)||(u.boss_runs=[]):u.boss_runs=[];const h=u.boss_runs,m=A(),_=(u.characters||[]).find((g,R)=>g.name===r&&(g.index===o||R===o));if(_){const g=new Set;(e=_.bosses)==null||e.forEach($=>{g.add(`${$.name}-${$.difficulty}`)});const R=h.length,W=h.filter($=>{if($.character!==r||$.weekKey!==m)return!0;const P=`${$.boss}-${$.difficulty}`,O=g.has(P);return O});u.boss_runs=W,W.length}const E=u.boss_runs,b=E.findIndex(g=>g.character===r&&g.boss===c&&g.difficulty===s&&g.weekKey===m);let k;if(f){const g={id:`${r}-${c}-${s}-${m}-${Date.now()}`,character:r,characterIdx:o||0,boss:c,difficulty:s,cleared:!0,date:l||new Date().toISOString(),weekKey:m};b!==-1?(k=[...E],k[b]={...k[b],cleared:!0,date:l||new Date().toISOString(),lastUpdated:new Date().toISOString()}):k=[...E,g]}else b!==-1?k=E.filter((g,R)=>R!==b):k=[...E];const q={...u,boss_runs:k,lastUpdated:new Date().toISOString()},x={...u,boss_runs:k,lastUpdated:new Date().toISOString()},{data:D,error:I}=await p.from("user_data").update({data:x}).eq("id",a).select();if(I)throw console.error("Database update error:",I),I;const{data:w,error:K}=await p.from("user_data").select("*").eq("id",a).single();if(K)console.error("Verification fetch error:",K);else if(!((n=w==null?void 0:w.data)!=null&&n.boss_runs)){const g={id:a,data:{...w.data,boss_runs:k,lastUpdated:new Date().toISOString()}},{error:R}=await p.from("user_data").upsert(g);if(R)console.error("Upsert failed:",R);else{const{data:W}=await p.from("user_data").select("*").eq("id",a).single();(i=W==null?void 0:W.data)!=null&&i.boss_runs}}return{success:!0,bossRuns:k,updatedData:q}}catch(r){return console.error("Error saving boss run:",r),{success:!1,error:r}}}async function Q(a,t,e=!1,n=null){var i;try{const{character:r,bossName:o,itemName:c,itemImage:s,date:f,characterIdx:l,bossDifficulty:p}=t;if(!a||!r||!o||!c||!s)return console.error("Missing required fields:",{userCode:a,character:r,bossName:o,itemName:c,itemImage:s}),{success:!1,error:"Missing required fields"};const d=await S(),{data:y,error:u}=await d.from("user_data").select("pitched_items, data").eq("id",a).single();if(u)throw console.error("Error fetching user data:",u),u;const h=y.pitched_items||[],m=y.data||{},v=m.boss_runs||[],_=n||F(f)||A(),E=A(),b=_===E;if(b&&!e){const q=(m.characters||[]).find((x,D)=>x.name===r&&(x.index===l||D===l));if(q){const x=new Set;(i=q.bosses)==null||i.forEach(w=>{x.add(`${w.name}-${w.difficulty}`)});const D=h.length,I=h.filter(w=>{if(w.character!==r||w.weekKey!==E)return!0;const K=`${w.boss}-${w.difficulty||"Unknown"}`,g=x.has(K);return g});D!==I.length&&(h.length=0,h.push(...I))}}if(e){const k=h.filter(D=>!(D.character===r&&D.boss===o&&D.item===c&&D.weekKey===_));let q=m;if(b){const D=v.filter(I=>!(I.character===r&&I.boss===o&&I.weekKey===_&&I.hasPitchedItem===!0));q={...m,boss_runs:D,lastUpdated:new Date().toISOString()}}const{error:x}=await d.from("user_data").update({pitched_items:k,...b&&{data:q}}).eq("id",a);if(x)throw x;return{success:!0}}else{const k={character:r,characterIdx:l||0,boss:o,difficulty:p,item:c,image:s,date:f||new Date().toISOString(),weekKey:_};if(h.find(w=>w.character===r&&w.boss===o&&w.item===c&&w.weekKey===_))return{success:!0,alreadyExists:!0};const x=[...h,k];let D=m;if(b){let w=[...v];const K=v.findIndex(g=>g.character===r&&g.boss===o&&g.weekKey===_);if(K===-1){const $=H(o).sort((P,O)=>{const B={Extreme:5,Hard:4,Chaos:3,Normal:2,Easy:1},U=P.split("-")[1],N=O.split("-")[1];return(B[N]||0)-(B[U]||0)})[0].split("-")[1];w.push({character:r,characterIdx:l||0,boss:o,difficulty:$,cleared:!0,date:f||new Date().toISOString(),weekKey:_,hasPitchedItem:!0})}else w[K]={...w[K],hasPitchedItem:!0,date:f||new Date().toISOString()};D={...m,boss_runs:w,lastUpdated:new Date().toISOString()}}const{error:I}=await d.from("user_data").update({pitched_items:x,...b&&{data:D}}).eq("id",a);if(I)throw I;if(b){const K=D.checked||{},g=`${r}-${l||0}`,R=H(o);let W=!1;if(K[g]){for(const $ of R)if(K[g][$]){W=!0;break}}if(!W&&R.length>0){const P=R.sort((O,B)=>{const U={Extreme:5,Hard:4,Chaos:3,Normal:2,Easy:1},N=O.split("-")[1],T=B.split("-")[1];return(U[T]||0)-(U[N]||0)})[0];K[g]||(K[g]={}),K[g][P]=!0}}return{success:!0}}return{success:!0,data:pitchedItem,updatedWeekKey:_}}catch(r){return console.error("Error saving pitched item:",r),{success:!1,error:r.message||"Unknown error occurred"}}}async function X(a){try{const t=await S(),{data:e,error:n}=await t.from("user_data").select("pitched_items").eq("id",a).single();if(n)throw n;return{success:!0,items:(e==null?void 0:e.pitched_items)||[]}}catch(t){return console.error("Error fetching all pitched items:",t),{success:!1,error:t,items:[]}}}async function Z(a,t=null){try{const e=await S(),{data:n,error:i}=await e.from("user_data").select("pitched_items").eq("id",a).single();if(i)throw i;const r=n.pitched_items||[],o={};return r.forEach(c=>{const s=new Date(c.date).getFullYear();t&&s!==parseInt(t)||(o[s]||(o[s]={total:0,characters:new Set,items:[]}),o[s].total+=1,o[s].characters.add(c.character),o[s].items.push({character:c.character,boss:c.boss,item:c.item,image:c.image,date:c.date}))}),Object.keys(o).forEach(c=>{o[c].characters=Array.from(o[c].characters)}),{success:!0,data:o}}catch(e){return console.error("Error fetching yearly pitched stats:",e),{success:!1,error:e,data:{}}}}async function ee(a,t){try{const e=await S(),{data:n,error:i}=await e.from("user_data").select("pitched_items, data").eq("id",a).single();if(i)throw i;const r=n.pitched_items||[],o=n.data||{},c=o.boss_runs||[],s=A(),f=r.filter(y=>!t.some(u=>y.character===u.character&&y.boss===u.bossName&&y.item===u.itemName&&y.weekKey===u.weekKey)),l=t.filter(y=>y.weekKey===s);let p=o;if(l.length>0){const y=c.filter(u=>!l.some(m=>u.character===m.character&&u.boss===m.bossName&&u.weekKey===m.weekKey&&u.hasPitchedItem===!0));p={...o,boss_runs:y,lastUpdated:new Date().toISOString()}}const{error:d}=await e.from("user_data").update({pitched_items:f,...l.length>0&&{data:p}}).eq("id",a);if(d)throw d;return{success:!0}}catch(e){return console.error("Error removing many pitched items:",e),{success:!1,error:e}}}async function te(a){var t;try{const e=await S(),{data:n,error:i}=await e.from("user_data").select("data, pitched_items").eq("id",a).single();if(i)throw i;return{success:!0,export:{data:n.data,pitched_items:n.pitched_items,weekKey:((t=n.data)==null?void 0:t.weekKey)||A(),exportDate:new Date().toISOString()}}}catch(e){return console.error("Error exporting user data:",e),{success:!1,error:e}}}function H(a){const t=["Easy","Normal","Hard","Chaos","Extreme"];return({Lotus:["Easy","Normal","Hard","Extreme"],Damien:["Normal","Hard"],Will:["Easy","Normal","Hard"],Lucid:["Easy","Normal","Hard"],"Chosen Seren":["Normal","Hard","Extreme"],"Watcher Kalos":["Easy","Normal","Chaos","Extreme"],Kaling:["Easy","Normal","Hard","Extreme"],Limbo:["Normal","Hard"]}[a]||t).map(i=>`${a}-${i}`)}async function re(a,t){var e;try{if(!t||typeof t!="object")throw new Error("Invalid import object");const{data:n,pitched_items:i,weekKey:r}=t,o=await S(),{data:c,error:s}=await o.from("user_data").select("data").eq("id",a).single();if(s&&s.code!=="PGRST116")throw s;const f=A(),l=(e=c==null?void 0:c.data)==null?void 0:e.weekKey;let p={...n};r&&r!==f&&(console.log(`[Import] Week key transition: ${r} -> ${f}`),p.weekKey=f);const{error:d}=await o.from("user_data").update({data:p,pitched_items:i}).eq("id",a);if(d)throw d;return console.log(`[Import] Successfully imported data for user '${a}'.`),{success:!0,data:p}}catch(n){return console.error("Error importing user data:",n),{success:!1,error:n}}}async function se(a,t,e=0){try{if(!a||!t)return console.error("Missing required fields:",{userCode:a,characterName:t}),{success:!1,error:"Missing required fields"};const n=await S(),{data:i,error:r}=await n.from("user_data").select("data, pitched_items").eq("id",a).single();if(r)throw console.error("Error fetching user data:",r),r;const o=i.data||{},c=i.pitched_items||[],s=o.boss_runs||[],f=c.filter(h=>{const m=h.character===t&&(h.characterIdx===e||h.characterIndex===e);return!m}),l=s.filter(h=>{const m=h.character===t&&(h.characterIdx===e||h.characterIndex===e),v=h.isPitched===!0||h.hasPitchedItem===!0;return!(m&&v)}),p=new Date().toISOString(),d={timestamp:p,action:"purge_pitched_records",character:t,characterIdx:e,itemsRemoved:c.length-f.length,bossRunsRemoved:s.length-l.length,userAgent:typeof navigator<"u"?navigator.userAgent:"Server"},y={...o,boss_runs:l,lastUpdated:p,pitched_reset_history:[...o.pitched_reset_history||[],d].slice(-50)},{error:u}=await n.from("user_data").update({pitched_items:f,data:y}).eq("id",a);if(u)throw console.error("Database update error:",u),u;return{success:!0,audit:d,itemsRemoved:d.itemsRemoved,bossRunsRemoved:d.bossRunsRemoved,bossRunsPreserved:l.length}}catch(n){return console.error("Error purging pitched records:",n),{success:!1,error:n.message||"Unknown error occurred"}}}async function ae(a){var t;try{if(!a)return{success:!1,error:"User code is required"};const e=await S(),{data:n,error:i}=await e.from("user_data").select("data").eq("id",a).single();if(i)throw console.error("Error fetching audit history:",i),i;const o=(((t=n.data)==null?void 0:t.pitched_reset_history)||[]).sort((c,s)=>new Date(s.timestamp)-new Date(c.timestamp));return{success:!0,history:o,totalResets:o.length}}catch(e){return console.error("Error getting pitched reset audit history:",e),{success:!1,error:e.message||"Unknown error occurred"}}}function oe(a,t,e,n){const i={...a};return Object.keys(i).forEach(r=>{r.startsWith(`${t}-${e}__`)&&r.endsWith(`__${n}`)&&delete i[r]}),i}async function ce(a){try{if(!a)return console.log("No user code provided for getAvailableWeeks"),{success:!1,error:"No user code provided"};const t=await S(),{data:e,error:n}=await t.from("user_data").select("data, pitched_items").eq("id",a).single();if(n)return console.error("Error fetching user data for available weeks:",n),{success:!1,error:n.message};const i=new Set,r=A();i.add(r),e.pitched_items&&Array.isArray(e.pitched_items)&&e.pitched_items.forEach(c=>{c.weekKey&&i.add(c.weekKey)}),e.data&&e.data.boss_runs&&Array.isArray(e.data.boss_runs)&&e.data.boss_runs.forEach(c=>{c.weekKey&&i.add(c.weekKey)}),e.data&&e.data.weekKey&&i.add(e.data.weekKey);const o=Array.from(i).sort((c,s)=>{const[f,l]=c.split("-").map(Number),[p,d]=s.split("-").map(Number);return f!==p?f-p:l-d});return{success:!0,weeks:o,currentWeek:r,oldestWeek:o.length>0?o[0]:r,newestWeek:o.length>0?o[o.length-1]:r}}catch(t){return console.error("Error in getAvailableWeeks:",t),{success:!1,error:t.message}}}async function ne(a){try{if(!a)return console.error("Missing required field: userCode"),{success:!1,error:"Missing required field: userCode"};const t=await S(),{data:e,error:n}=await t.from("user_data").select("data, pitched_items").eq("id",a).single();if(n)throw console.error("Error fetching user data:",n),n;const i=e.data||{},r=e.pitched_items||[],o=i.boss_runs||[],c=new Date().toISOString(),s={timestamp:c,action:"complete_stats_reset",itemsRemoved:r.length,bossRunsRemoved:o.length,userAgent:typeof navigator<"u"?navigator.userAgent:"Server"},f={...i,boss_runs:[],lastUpdated:c,pitched_reset_history:[...i.pitched_reset_history||[],s].slice(-50)},{error:l}=await t.from("user_data").update({pitched_items:[],data:f}).eq("id",a);if(l)throw console.error("Database update error:",l),l;return{success:!0,audit:s,itemsRemoved:s.itemsRemoved,bossRunsRemoved:s.bossRunsRemoved}}catch(t){return console.error("Error in complete stats reset:",t),{success:!1,error:t.message||"Unknown error occurred"}}}async function ie(a,t){try{if(!a||!Array.isArray(t)||t.length===0)return console.error("Invalid parameters for batch boss runs"),{success:!1,error:"Invalid parameters"};for(const d of t){const{character:y,characterIdx:u,bossName:h,bossDifficulty:m,isCleared:v,date:_}=d;if(!y||!h||!m||v===void 0)return console.error("Missing required fields in batch entry:",d),{success:!1,error:"Missing required fields in batch entry"}}const e=await S(),{data:n,error:i}=await e.from("user_data").select("*").eq("id",a).single();if(i)throw console.error("Error fetching user data for batch update:",i),i;if(!n)throw console.error("No user data found for batch update"),new Error("No user data found");const r=n.data?JSON.parse(JSON.stringify(n.data)):{};(!r.boss_runs||!Array.isArray(r.boss_runs))&&(r.boss_runs=[]);const o=[...r.boss_runs],c=A();let s=[...o];for(const d of t){const{character:y,characterIdx:u,bossName:h,bossDifficulty:m,isCleared:v,date:_}=d,E=s.findIndex(b=>b.character===y&&b.boss===h&&b.difficulty===m&&b.weekKey===c);if(v){const b={id:`${y}-${h}-${m}-${c}-${Date.now()}`,character:y,characterIdx:u||0,boss:h,difficulty:m,cleared:!0,date:_||new Date().toISOString(),weekKey:c};E!==-1?s[E]={...s[E],cleared:!0,date:_||new Date().toISOString(),lastUpdated:new Date().toISOString()}:s.push(b)}else E!==-1&&(s=s.filter((b,k)=>k!==E))}const f={...r,boss_runs:s,lastUpdated:new Date().toISOString()},{data:l,error:p}=await e.from("user_data").update({data:f}).eq("id",a).select();if(p)throw console.error("Batch database update error:",p),p;return{success:!0,updatedCount:t.length,totalBossRuns:s.length}}catch(e){return console.error("Error in saveBatchBossRuns:",e),{success:!1,error:e.message}}}async function de(a){try{if(!a)return console.log("No user code provided for getHistoricalWeekAnalysis"),{success:!1,error:"No user code provided"};const t=await S(),{data:e,error:n}=await t.from("user_data").select("data, pitched_items").eq("id",a).single();if(n)return console.error("Error fetching user data for historical analysis:",n),{success:!1,error:n.message};const i=A(),r=new Set;e.pitched_items&&Array.isArray(e.pitched_items)&&e.pitched_items.forEach((d,y)=>{d.weekKey&&d.weekKey!==i&&r.add(d.weekKey)}),e.data&&e.data.boss_runs&&Array.isArray(e.data.boss_runs)&&e.data.boss_runs.forEach((d,y)=>{d.weekKey&&d.weekKey!==i&&r.add(d.weekKey)});const o=Array.from(r).sort((d,y)=>{const u=v=>{const _=v.split("-");return _.length===2?{year:parseInt(_[0]),week:parseInt(_[1])}:_.length===3?{year:parseInt(_[0]),week:parseInt(_[1])}:{year:0,week:0}},h=u(d),m=u(y);return h.year!==m.year?h.year-m.year:h.week-m.week}),c=o.length>0;let s=null,f="new",l=8;if(c){s=o[0];const{getWeekOffset:d}=await M(async()=>{const{getWeekOffset:h}=await import("./weekUtils-DSxD6JlE.js");return{getWeekOffset:h}},__vite__mapDeps([3,4,5,6,2,1,7])),y=d(s),u=Math.abs(y);u>8?(f="existing",l=u):f="new"}return{success:!0,hasHistoricalData:c,oldestHistoricalWeek:s,historicalWeeks:o,totalHistoricalWeeks:o.length,userType:f,adaptiveWeekLimit:l,currentWeek:i,analysis:{pitchedItemsCount:e.pitched_items?e.pitched_items.length:0,bossRunsCount:e.data&&e.data.boss_runs?e.data.boss_runs.length:0,weeksWithData:o.length+1}}}catch(t){return console.error("Error in getHistoricalWeekAnalysis:",t),{success:!1,error:t.message}}}async function ue(a,t){try{if(!a||!Array.isArray(t))return console.error("Invalid parameters for pitched items cleanup"),{success:!1,error:"Invalid parameters"};const e=await S(),{data:n,error:i}=await e.from("user_data").select("pitched_items").eq("id",a).single();if(i)return console.error("Error fetching pitched items for cleanup:",i),{success:!1,error:i.message};const r=n.pitched_items||[];if(r.length===0)return{success:!0,itemsRemoved:0};const o=new Set;t.forEach((s,f)=>{var l;(l=s.bosses)==null||l.forEach(p=>{const d=`${s.name}-${f}-${p.name}-${p.difficulty}`;o.add(d)})});const c=r.filter(s=>{const f=`${s.character}-${s.characterIdx||0}-${s.boss}-${s.difficulty||"Unknown"}`;let l=o.has(f);if(!l&&(s.difficulty==="Unknown"||!s.difficulty)){const p=`${s.character}-${s.characterIdx||0}-${s.boss}-`;l=Array.from(o).some(d=>d.startsWith(p))}return l});if(c.length!==r.length){const{error:s}=await e.from("user_data").update({pitched_items:c}).eq("id",a);return s?(console.error("Error updating pitched items:",s),{success:!1,error:s.message}):{success:!0,itemsRemoved:r.length-c.length}}else return{success:!0,itemsRemoved:0}}catch(e){return console.error("Error in cleanupOrphanedPitchedItems:",e),{success:!1,error:e.message||"Unknown error occurred"}}}export{ue as cleanupOrphanedPitchedItems,oe as clearCharacterPitchedUI,te as exportUserData,X as getAllPitchedItems,ce as getAvailableWeeks,A as getCurrentWeekKey,de as getHistoricalWeekAnalysis,ae as getPitchedResetAuditHistory,Z as getYearlyPitchedStats,re as importUserData,ne as purgeAllStatsData,se as purgePitchedRecords,ee as removeManyPitchedItems,ie as saveBatchBossRuns,z as saveBossRun,Q as savePitchedItem};
